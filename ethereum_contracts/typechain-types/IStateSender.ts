/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IStateSenderInterface extends utils.Interface {
  contractName: "IStateSender";
  functions: {
    "emitDeposit(address,bytes32,address,address,bytes)": FunctionFragment;
    "emitMerkleRoot(bytes32)": FunctionFragment;
    "emitTokenMapAdd(address,uint64,uint64,bytes32)": FunctionFragment;
    "emitTokenMapRemove(address,uint64,uint64,bytes32)": FunctionFragment;
    "emitVaultRegistered(bytes32,address)": FunctionFragment;
    "emitWithdraw(uint64,uint64,uint256,address,bytes32,uint64,uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [string, BytesLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitTokenMapAdd",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitTokenMapRemove",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitVaultRegistered",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitTokenMapAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitTokenMapRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitVaultRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw",
    data: BytesLike
  ): Result;

  events: {
    "LockedToken(uint256,address,bytes32,address,address,bytes)": EventFragment;
    "MerkleRoot(uint256,bytes32)": EventFragment;
    "TokenMapAdded(uint256,address,uint64,uint64,bytes32)": EventFragment;
    "TokenMapRemoved(uint256,address,uint64,uint64,bytes32)": EventFragment;
    "VaultRegistered(uint256,bytes32,address)": EventFragment;
    "WithdrawEvent(uint256,uint64,uint64,uint256,address,bytes32,uint64,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEvent"): EventFragment;
}

export type LockedTokenEvent = TypedEvent<
  [BigNumber, string, string, string, string, string],
  {
    id: BigNumber;
    depositor: string;
    depositReceiver: string;
    rootToken: string;
    vault: string;
    depositData: string;
  }
>;

export type LockedTokenEventFilter = TypedEventFilter<LockedTokenEvent>;

export type MerkleRootEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; root: string }
>;

export type MerkleRootEventFilter = TypedEventFilter<MerkleRootEvent>;

export type TokenMapAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  {
    id: BigNumber;
    rootToken: string;
    childTokenIndex: BigNumber;
    childTokenSubIndex: BigNumber;
    tokenType: string;
  }
>;

export type TokenMapAddedEventFilter = TypedEventFilter<TokenMapAddedEvent>;

export type TokenMapRemovedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  {
    id: BigNumber;
    rootToken: string;
    childTokenIndex: BigNumber;
    childTokenSubIndex: BigNumber;
    tokenType: string;
  }
>;

export type TokenMapRemovedEventFilter = TypedEventFilter<TokenMapRemovedEvent>;

export type VaultRegisteredEvent = TypedEvent<
  [BigNumber, string, string],
  { id: BigNumber; tokenType: string; vaultAddress: string }
>;

export type VaultRegisteredEventFilter = TypedEventFilter<VaultRegisteredEvent>;

export type WithdrawEventEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ],
  {
    id: BigNumber;
    ccdIndex: BigNumber;
    ccdSubIndex: BigNumber;
    amount: BigNumber;
    userWallet: string;
    ccdTxHash: string;
    ccdEventIndex: BigNumber;
    tokenId: BigNumber;
  }
>;

export type WithdrawEventEventFilter = TypedEventFilter<WithdrawEventEvent>;

export interface IStateSender extends BaseContract {
  contractName: "IStateSender";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStateSenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitDeposit(
      user: string,
      userCCd: BytesLike,
      rootToken: string,
      vault: string,
      depositData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitTokenMapAdd(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitTokenMapRemove(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitVaultRegistered(
      tokenType: BytesLike,
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emitWithdraw(
      ccdIndex: BigNumberish,
      ccdSubIndex: BigNumberish,
      amount: BigNumberish,
      userWallet: string,
      ccdTxHash: BytesLike,
      ccdEventIndex: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  emitDeposit(
    user: string,
    userCCd: BytesLike,
    rootToken: string,
    vault: string,
    depositData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitMerkleRoot(
    root: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitTokenMapAdd(
    rootToken: string,
    childTokenIndex: BigNumberish,
    childTokenSubIndex: BigNumberish,
    tokenType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitTokenMapRemove(
    rootToken: string,
    childTokenIndex: BigNumberish,
    childTokenSubIndex: BigNumberish,
    tokenType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitVaultRegistered(
    tokenType: BytesLike,
    vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emitWithdraw(
    ccdIndex: BigNumberish,
    ccdSubIndex: BigNumberish,
    amount: BigNumberish,
    userWallet: string,
    ccdTxHash: BytesLike,
    ccdEventIndex: BigNumberish,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitDeposit(
      user: string,
      userCCd: BytesLike,
      rootToken: string,
      vault: string,
      depositData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emitMerkleRoot(root: BytesLike, overrides?: CallOverrides): Promise<void>;

    emitTokenMapAdd(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emitTokenMapRemove(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    emitVaultRegistered(
      tokenType: BytesLike,
      vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emitWithdraw(
      ccdIndex: BigNumberish,
      ccdSubIndex: BigNumberish,
      amount: BigNumberish,
      userWallet: string,
      ccdTxHash: BytesLike,
      ccdEventIndex: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LockedToken(uint256,address,bytes32,address,address,bytes)"(
      id?: null,
      depositor?: string | null,
      depositReceiver?: null,
      rootToken?: string | null,
      vault?: string | null,
      depositData?: null
    ): LockedTokenEventFilter;
    LockedToken(
      id?: null,
      depositor?: string | null,
      depositReceiver?: null,
      rootToken?: string | null,
      vault?: string | null,
      depositData?: null
    ): LockedTokenEventFilter;

    "MerkleRoot(uint256,bytes32)"(
      id?: null,
      root?: null
    ): MerkleRootEventFilter;
    MerkleRoot(id?: null, root?: null): MerkleRootEventFilter;

    "TokenMapAdded(uint256,address,uint64,uint64,bytes32)"(
      id?: null,
      rootToken?: string | null,
      childTokenIndex?: null,
      childTokenSubIndex?: null,
      tokenType?: BytesLike | null
    ): TokenMapAddedEventFilter;
    TokenMapAdded(
      id?: null,
      rootToken?: string | null,
      childTokenIndex?: null,
      childTokenSubIndex?: null,
      tokenType?: BytesLike | null
    ): TokenMapAddedEventFilter;

    "TokenMapRemoved(uint256,address,uint64,uint64,bytes32)"(
      id?: null,
      rootToken?: string | null,
      childTokenIndex?: null,
      childTokenSubIndex?: null,
      tokenType?: BytesLike | null
    ): TokenMapRemovedEventFilter;
    TokenMapRemoved(
      id?: null,
      rootToken?: string | null,
      childTokenIndex?: null,
      childTokenSubIndex?: null,
      tokenType?: BytesLike | null
    ): TokenMapRemovedEventFilter;

    "VaultRegistered(uint256,bytes32,address)"(
      id?: null,
      tokenType?: BytesLike | null,
      vaultAddress?: string | null
    ): VaultRegisteredEventFilter;
    VaultRegistered(
      id?: null,
      tokenType?: BytesLike | null,
      vaultAddress?: string | null
    ): VaultRegisteredEventFilter;

    "WithdrawEvent(uint256,uint64,uint64,uint256,address,bytes32,uint64,uint64)"(
      id?: null,
      ccdIndex?: BigNumberish | null,
      ccdSubIndex?: BigNumberish | null,
      amount?: null,
      userWallet?: string | null,
      ccdTxHash?: null,
      ccdEventIndex?: null,
      tokenId?: null
    ): WithdrawEventEventFilter;
    WithdrawEvent(
      id?: null,
      ccdIndex?: BigNumberish | null,
      ccdSubIndex?: BigNumberish | null,
      amount?: null,
      userWallet?: string | null,
      ccdTxHash?: null,
      ccdEventIndex?: null,
      tokenId?: null
    ): WithdrawEventEventFilter;
  };

  estimateGas: {
    emitDeposit(
      user: string,
      userCCd: BytesLike,
      rootToken: string,
      vault: string,
      depositData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitTokenMapAdd(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitTokenMapRemove(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitVaultRegistered(
      tokenType: BytesLike,
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emitWithdraw(
      ccdIndex: BigNumberish,
      ccdSubIndex: BigNumberish,
      amount: BigNumberish,
      userWallet: string,
      ccdTxHash: BytesLike,
      ccdEventIndex: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    emitDeposit(
      user: string,
      userCCd: BytesLike,
      rootToken: string,
      vault: string,
      depositData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitMerkleRoot(
      root: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitTokenMapAdd(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitTokenMapRemove(
      rootToken: string,
      childTokenIndex: BigNumberish,
      childTokenSubIndex: BigNumberish,
      tokenType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitVaultRegistered(
      tokenType: BytesLike,
      vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emitWithdraw(
      ccdIndex: BigNumberish,
      ccdSubIndex: BigNumberish,
      amount: BigNumberish,
      userWallet: string,
      ccdTxHash: BytesLike,
      ccdEventIndex: BigNumberish,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
