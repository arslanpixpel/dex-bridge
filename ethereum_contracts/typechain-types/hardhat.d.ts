/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BridgeProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeProxyAdmin__factory>;
    getContractFactory(
      name: "IRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRootChainManager__factory>;
    getContractFactory(
      name: "RootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootChainManager__factory>;
    getContractFactory(
      name: "RootChainManagerProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootChainManagerProxy__factory>;
    getContractFactory(
      name: "RootChainManagerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootChainManagerStorage__factory>;
    getContractFactory(
      name: "IStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStateSender__factory>;
    getContractFactory(
      name: "StateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateSender__factory>;
    getContractFactory(
      name: "StateSenderProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StateSenderProxy__factory>;
    getContractFactory(
      name: "MockErc20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockErc20__factory>;
    getContractFactory(
      name: "MockStateSenderUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStateSenderUpgrade__factory>;
    getContractFactory(
      name: "ERC20Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Vault__factory>;
    getContractFactory(
      name: "ERC20VaultProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VaultProxy__factory>;
    getContractFactory(
      name: "EtherVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherVault__factory>;
    getContractFactory(
      name: "EtherVaultProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherVaultProxy__factory>;
    getContractFactory(
      name: "ITokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenVault__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "ITransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BridgeProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeProxyAdmin>;
    getContractAt(
      name: "IRootChainManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRootChainManager>;
    getContractAt(
      name: "RootChainManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootChainManager>;
    getContractAt(
      name: "RootChainManagerProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootChainManagerProxy>;
    getContractAt(
      name: "RootChainManagerStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootChainManagerStorage>;
    getContractAt(
      name: "IStateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStateSender>;
    getContractAt(
      name: "StateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StateSender>;
    getContractAt(
      name: "StateSenderProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StateSenderProxy>;
    getContractAt(
      name: "MockErc20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockErc20>;
    getContractAt(
      name: "MockStateSenderUpgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStateSenderUpgrade>;
    getContractAt(
      name: "ERC20Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Vault>;
    getContractAt(
      name: "ERC20VaultProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VaultProxy>;
    getContractAt(
      name: "EtherVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherVault>;
    getContractAt(
      name: "EtherVaultProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherVaultProxy>;
    getContractAt(
      name: "ITokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenVault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
