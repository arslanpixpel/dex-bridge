/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface RootChainManagerStorageInterface extends utils.Interface {
  contractName: "RootChainManagerStorage";
  functions: {
    "ETHER_ADDRESS()": FunctionFragment;
    "MAPPER_ROLE()": FunctionFragment;
    "MERKLE_UPDATER()": FunctionFragment;
    "childToRootToken(bytes32)": FunctionFragment;
    "depositFee()": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "paused()": FunctionFragment;
    "previousMerkleRoot()": FunctionFragment;
    "processedExits(bytes32)": FunctionFragment;
    "rootToChildToken(address)": FunctionFragment;
    "tokenToType(address)": FunctionFragment;
    "treasurer()": FunctionFragment;
    "typeToVault(bytes32)": FunctionFragment;
    "withdrawFee()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETHER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAPPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MERKLE_UPDATER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "childToRootToken",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processedExits",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rootToChildToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenToType", values: [string]): string;
  encodeFunctionData(functionFragment: "treasurer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "typeToVault",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ETHER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAPPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MERKLE_UPDATER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childToRootToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootToChildToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasurer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "typeToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RootChainManagerStorage extends BaseContract {
  contractName: "RootChainManagerStorage";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RootChainManagerStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ETHER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    MAPPER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MERKLE_UPDATER(overrides?: CallOverrides): Promise<[string]>;

    childToRootToken(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    previousMerkleRoot(overrides?: CallOverrides): Promise<[string]>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; subindex: BigNumber }
    >;

    tokenToType(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    treasurer(overrides?: CallOverrides): Promise<[string]>;

    typeToVault(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ETHER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  MAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

  MERKLE_UPDATER(overrides?: CallOverrides): Promise<string>;

  childToRootToken(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  previousMerkleRoot(overrides?: CallOverrides): Promise<string>;

  processedExits(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  rootToChildToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { index: BigNumber; subindex: BigNumber }
  >;

  tokenToType(arg0: string, overrides?: CallOverrides): Promise<string>;

  treasurer(overrides?: CallOverrides): Promise<string>;

  typeToVault(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ETHER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    MAPPER_ROLE(overrides?: CallOverrides): Promise<string>;

    MERKLE_UPDATER(overrides?: CallOverrides): Promise<string>;

    childToRootToken(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    previousMerkleRoot(overrides?: CallOverrides): Promise<string>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; subindex: BigNumber }
    >;

    tokenToType(arg0: string, overrides?: CallOverrides): Promise<string>;

    treasurer(overrides?: CallOverrides): Promise<string>;

    typeToVault(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ETHER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    MAPPER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MERKLE_UPDATER(overrides?: CallOverrides): Promise<BigNumber>;

    childToRootToken(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    previousMerkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    treasurer(overrides?: CallOverrides): Promise<BigNumber>;

    typeToVault(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAPPER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MERKLE_UPDATER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    childToRootToken(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousMerkleRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processedExits(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rootToChildToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToType(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasurer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeToVault(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
